--- opentitan.v	2020-05-02 17:45:40.000000000 -0400
+++ opentitan_patched.v	2020-05-02 21:48:30.000000000 -0400
@@ -6517,9 +6517,9 @@
 		genvar i;
 		for (i = 0; i < NumTarget; i = i + 1) begin : gen_target
 			wire [1:1] sv2v_tmp_u_target_irq;
-			always @(*) irq_o[i] = sv2v_tmp_u_target_irq;
+			assign irq_o[i] = sv2v_tmp_u_target_irq;
 			wire [((i * SRCW) >= (((i * SRCW) + SRCW) - 1) ? ((i * SRCW) - (((i * SRCW) + SRCW) - 1)) + 1 : ((((i * SRCW) + SRCW) - 1) - (i * SRCW)) + 1):1] sv2v_tmp_u_target_irq_id;
-			always @(*) irq_id_o[i * SRCW+:SRCW] = sv2v_tmp_u_target_irq_id;
+			assign irq_id_o[i * SRCW+:SRCW] = sv2v_tmp_u_target_irq_id;
 			rv_plic_target #(
 				.N_SOURCE(NumSrc),
 				.MAX_PRIO(MAX_PRIO)
@@ -14347,9 +14347,6 @@
 			ping_pending_q <= ping_pending_d;
 		end
 	end
-	generate
-		if (AsyncOn) ;
-	endgenerate
 endmodule
 module prim_alert_sender (
 	clk_i,
@@ -14479,9 +14476,6 @@
 			ping_set_q <= ping_set_d;
 		end
 	end
-	generate
-		if (AsyncOn) ;
-	endgenerate
 endmodule
 module prim_arbiter (
 	clk_i,
@@ -15214,7 +15208,7 @@
 	wire [LfsrDw - 1:0] next_lfsr_state;
 	wire [LfsrDw - 1:0] coeffs;
 	generate
-		if (sv2v_cast_64(LfsrType) == sv2v_cast_64("GAL_XOR")) begin : gen_gal_xor
+		if (LfsrType == "GAL_XOR") begin : gen_gal_xor
 			if (CustomCoeffs > 0) begin : gen_custom
 				assign coeffs = CustomCoeffs[LfsrDw - 1:0];
 			end
@@ -15276,12 +15270,6 @@
 		end
 	endfunction
 	generate
-		if (ExtSeedSVA) ;
-	endgenerate
-	generate
-		if (LockupSVA) ;
-	endgenerate
-	generate
 		if (MaxLenSVA) begin : gen_max_len_sva
 			wire [LfsrDw - 1:0] cnt_d;
 			reg [LfsrDw - 1:0] cnt_q;
@@ -16610,9 +16598,6 @@
 			end
 		end
 	endgenerate
-	generate
-		if (AsyncOn) ;
-	endgenerate
 endmodule
 module prim_pad_wrapper (
 	inout_io,
@@ -17173,7 +17158,6 @@
 	reg [(((2 ** TL_AIW) - 1) >= 0 ? ((((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) >= 0 ? ((2 ** TL_AIW) * ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW))) + -1 : ((2 ** TL_AIW) * (2 - ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)))) + ((((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) - 1)) : ((((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) >= 0 ? ((2 - (2 ** TL_AIW)) * ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW))) + ((((2 ** TL_AIW) - 1) * ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW))) - 1) : ((2 - (2 ** TL_AIW)) * (2 - ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)))) + (((((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) + (((2 ** TL_AIW) - 1) * (2 - ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW))))) - 1))):(((2 ** TL_AIW) - 1) >= 0 ? ((((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) >= 0 ? 0 : ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) : ((((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) >= 0 ? ((2 ** TL_AIW) - 1) * ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) : (((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) + (((2 ** TL_AIW) - 1) * (2 - ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW))))))] pend_req;
 	wire tlul_assert_ctrl;
 	wire disable_sva;
-	pins_if #(1) tlul_assert_ctrl_if(tlul_assert_ctrl);
 	assign disable_sva = tlul_assert_ctrl === 1'b0;
 	wire [7:0] a_mask;
 	wire [7:0] d_mask;
@@ -17198,17 +17182,8 @@
 				if (h2d[0])
 					pend_req[((((2 ** TL_AIW) - 1) >= 0 ? d2h[top_pkg_TL_AIW + (top_pkg_TL_DIW + (top_pkg_TL_DW + (top_pkg_TL_DUW + 1)))-:((top_pkg_TL_AIW + (top_pkg_TL_DIW + (top_pkg_TL_DW + (top_pkg_TL_DUW + 1)))) - (top_pkg_TL_DIW + (top_pkg_TL_DW + (top_pkg_TL_DUW + 2)))) + 1] : 0 - (d2h[top_pkg_TL_AIW + (top_pkg_TL_DIW + (top_pkg_TL_DW + (top_pkg_TL_DUW + 1)))-:((top_pkg_TL_AIW + (top_pkg_TL_DIW + (top_pkg_TL_DW + (top_pkg_TL_DUW + 1)))) - (top_pkg_TL_DIW + (top_pkg_TL_DW + (top_pkg_TL_DUW + 2)))) + 1] - ((2 ** TL_AIW) - 1))) * ((((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) >= 0 ? (4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW) : 2 - ((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)))) + ((((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1) >= 0 ? 1 + (3 + (((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW) + (((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW) + -1))) : 0 - ((1 + (3 + (((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW) + (((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW) + -1)))) - (((4 + ((top_pkg_TL_SZW - 1) >= 0 ? top_pkg_TL_SZW : 2 - top_pkg_TL_SZW)) + ((top_pkg_TL_DBW - 1) >= 0 ? top_pkg_TL_DBW : 2 - top_pkg_TL_DBW)) - 1)))] <= 0;
 		end
-	generate
-		if (EndpointType == "Host") ;
-		else if (EndpointType == "Device") ;
-		else begin : gen_unknown
-			initial begin : p_unknonw
-				
-			end
-		end
-	endgenerate
 	initial begin : p_dbw
-		
+
 	end
 	genvar ii;
 	function automatic [63:0] sv2v_cast_64;
@@ -27937,6 +27912,7 @@
 		txf_sel = 1'b0;
 		cnt_rst = 1'b0;
 		cnt_incr = 1'b0;
+		st_next = 1'b0;
 		case (st)
 			StIdle: begin
 				latch_wptr = 1'b1;
@@ -33275,9 +33251,9 @@
 				_sv2v_strm_2F008_inp = v;
 				for (_sv2v_strm_2F008_idx = 0; _sv2v_strm_2F008_idx <= 23; _sv2v_strm_2F008_idx = _sv2v_strm_2F008_idx + 8)
 					_sv2v_strm_2F008_out[31 - _sv2v_strm_2F008_idx-:8] = _sv2v_strm_2F008_inp[_sv2v_strm_2F008_idx+:8];
-				_sv2v_strm_2F008_bas = _sv2v_strm_2F008_idx;
-				for (_sv2v_strm_2F008_idx = 0; _sv2v_strm_2F008_idx < (32 - _sv2v_strm_2F008_bas); _sv2v_strm_2F008_idx = _sv2v_strm_2F008_idx + 1)
-					_sv2v_strm_2F008_out[_sv2v_strm_2F008_idx] = _sv2v_strm_2F008_inp[_sv2v_strm_2F008_idx + _sv2v_strm_2F008_bas];
+				// _sv2v_strm_2F008_bas = _sv2v_strm_2F008_idx; ==> 24
+				for (_sv2v_strm_2F008_idx = 0; _sv2v_strm_2F008_idx < (32 - 24); _sv2v_strm_2F008_idx = _sv2v_strm_2F008_idx + 1)
+					_sv2v_strm_2F008_out[_sv2v_strm_2F008_idx] = _sv2v_strm_2F008_inp[_sv2v_strm_2F008_idx + 24];
 				conv_data = _sv2v_strm_2F008_out;
 			end
 			conv_endian = (swap ? conv_data : v);
